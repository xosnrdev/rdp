(* grammar.ebnf *)
(* Pure functional expression-based language grammar *)

program       = expression ;

expression    = let_expr
              | if_expr
              | lambda
              | comparison
              | pattern_match ;

let_expr      = "let" , identifier , [ ":" , type_annotation ] , "=" , expression , "in" , expression ;
if_expr       = "if" , expression , "then" , expression , "else" , expression ;
lambda        = "\\" , identifier , [ ":" , type_annotation ] , "->" , expression ;
pattern_match = "match" , expression , "with" , "|" , pattern , "->" , expression , { "|" , pattern , "->" , expression } ;

comparison    = logic , [ ("==" | "<" | ">") , logic ] ;
logic         = arithmetic , [ ("&&" | "||") , arithmetic ] ;
arithmetic    = application , { ("+" | "-" | "*" | "/") , application } ;
application   = term , { term } ;

term          = identifier
              | number
              | "(" , expression , ")"
              | "(" , expression , "." , identifier , ")" ;

pattern       = identifier
              | number
              | "(" , pattern , ")" ;

type_annotation = "Int"
                | "Bool"
                | "String"
                | "Float"
                | "(" , type_annotation , "->" , type_annotation , ")" ;

identifier    = letter , { letter | digit } ;
number        = digit , { digit } , [ "." , digit , { digit } ] ;
letter        = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j"
              | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t"
              | "u" | "v" | "w" | "x" | "y" | "z"
              | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J"
              | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T"
              | "U" | "V" | "W" | "X" | "Y" | "Z" ;
digit         = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

(* Operator precedence (highest to lowest):
   1. Parentheses ()
   2. Function application (left associative)
   3. Arithmetic operators (*, /, +, -)
   4. Logical operators (&&, ||)
   5. Comparison operators (==, <, >)
   6. Function composition (.)
   7. Lambda abstraction
   8. If-then-else
   9. Let-in
  10. Pattern matching *) 

(* Whitespace is ignored except within strings and where explicitly required,
   such as between keywords and identifiers. *)
